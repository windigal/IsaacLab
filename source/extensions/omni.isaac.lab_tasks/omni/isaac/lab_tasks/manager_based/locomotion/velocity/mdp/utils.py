import torch
from scipy.interpolate import UnivariateSpline
S = [i / 10 for i in range(1, 11)]

peaks = torch.tensor(
        [[[-0.222904856, -0.398410658], [ 0.74801878,  0.388095905], [-0.151327282, -0.253756036]],
         [[-0.202674384, -0.464732418], [ 0.87288400,  0.346149355], [-0.112754998, -0.273432473]],
         [[-0.125644614, -0.568563143], [ 1.08990022,  0.332829624], [-0.010730416, -0.306470563]],
         [[ 0.060455044, -0.624765793], [ 1.19037282,  0.297708362], [ 0.023672292, -0.353795697]],
         [[ 0.222318540, -0.675252140], [ 1.25288773,  0.208098198], [ 0.067569586, -0.418386022]],
         [[ 0.324639658, -0.709793766], [ 1.27832635,  0.165800378], [ 0.105877625, -0.467730373]],
         [[ 0.432440480, -0.752252241], [ 1.30005475,  0.074556691], [ 0.132878924, -0.478076627]],
         [[ 0.501398434, -0.794730047], [ 1.31349838,  0.005957472], [ 0.144416720, -0.480022808]],
         [[ 0.538123230, -0.833924949], [ 1.33908252, -0.000000553], [ 0.148099209, -0.481795669]],
         [[ 0.564531346, -0.857205749], [ 1.38976808, -0.000004539], [ 0.140434856, -0.492357562]]]
)


interpolation = {'max': [], 'min': []}
for j in range(3):
    max_values = peaks[:, j, 0]
    min_values = peaks[:, j, 1]

    cs_max = UnivariateSpline(S, max_values, s=0.3)
    interpolation['max'].append(cs_max)

    cs_min = UnivariateSpline(S, min_values, s=0.3)
    interpolation['min'].append(cs_min)
    
    
def trun_sin(x, min: float, max: float):
    return (torch.sin(x.cpu()) + 1) / 2 * (max - min) + min

